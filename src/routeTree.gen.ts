/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignInImport } from './routes/sign-in'
import { Route as PublicationsImport } from './routes/publications'
import { Route as ProjectsImport } from './routes/projects'
import { Route as IndexImport } from './routes/index'
import { Route as BlogsIndexImport } from './routes/blogs/index'
import { Route as BlogsBlogIdImport } from './routes/blogs/$blogId'
import { Route as AuthedAdminImport } from './routes/_authed/admin'

// Create/Update Routes

const SignInRoute = SignInImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRoute,
} as any)

const PublicationsRoute = PublicationsImport.update({
  id: '/publications',
  path: '/publications',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsRoute = ProjectsImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const BlogsIndexRoute = BlogsIndexImport.update({
  id: '/blogs/',
  path: '/blogs/',
  getParentRoute: () => rootRoute,
} as any)

const BlogsBlogIdRoute = BlogsBlogIdImport.update({
  id: '/blogs/$blogId',
  path: '/blogs/$blogId',
  getParentRoute: () => rootRoute,
} as any)

const AuthedAdminRoute = AuthedAdminImport.update({
  id: '/_authed/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/projects': {
      id: '/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsImport
      parentRoute: typeof rootRoute
    }
    '/publications': {
      id: '/publications'
      path: '/publications'
      fullPath: '/publications'
      preLoaderRoute: typeof PublicationsImport
      parentRoute: typeof rootRoute
    }
    '/sign-in': {
      id: '/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof SignInImport
      parentRoute: typeof rootRoute
    }
    '/_authed/admin': {
      id: '/_authed/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AuthedAdminImport
      parentRoute: typeof rootRoute
    }
    '/blogs/$blogId': {
      id: '/blogs/$blogId'
      path: '/blogs/$blogId'
      fullPath: '/blogs/$blogId'
      preLoaderRoute: typeof BlogsBlogIdImport
      parentRoute: typeof rootRoute
    }
    '/blogs/': {
      id: '/blogs/'
      path: '/blogs'
      fullPath: '/blogs'
      preLoaderRoute: typeof BlogsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/projects': typeof ProjectsRoute
  '/publications': typeof PublicationsRoute
  '/sign-in': typeof SignInRoute
  '/admin': typeof AuthedAdminRoute
  '/blogs/$blogId': typeof BlogsBlogIdRoute
  '/blogs': typeof BlogsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/projects': typeof ProjectsRoute
  '/publications': typeof PublicationsRoute
  '/sign-in': typeof SignInRoute
  '/admin': typeof AuthedAdminRoute
  '/blogs/$blogId': typeof BlogsBlogIdRoute
  '/blogs': typeof BlogsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/projects': typeof ProjectsRoute
  '/publications': typeof PublicationsRoute
  '/sign-in': typeof SignInRoute
  '/_authed/admin': typeof AuthedAdminRoute
  '/blogs/$blogId': typeof BlogsBlogIdRoute
  '/blogs/': typeof BlogsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/projects'
    | '/publications'
    | '/sign-in'
    | '/admin'
    | '/blogs/$blogId'
    | '/blogs'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/projects'
    | '/publications'
    | '/sign-in'
    | '/admin'
    | '/blogs/$blogId'
    | '/blogs'
  id:
    | '__root__'
    | '/'
    | '/projects'
    | '/publications'
    | '/sign-in'
    | '/_authed/admin'
    | '/blogs/$blogId'
    | '/blogs/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProjectsRoute: typeof ProjectsRoute
  PublicationsRoute: typeof PublicationsRoute
  SignInRoute: typeof SignInRoute
  AuthedAdminRoute: typeof AuthedAdminRoute
  BlogsBlogIdRoute: typeof BlogsBlogIdRoute
  BlogsIndexRoute: typeof BlogsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProjectsRoute: ProjectsRoute,
  PublicationsRoute: PublicationsRoute,
  SignInRoute: SignInRoute,
  AuthedAdminRoute: AuthedAdminRoute,
  BlogsBlogIdRoute: BlogsBlogIdRoute,
  BlogsIndexRoute: BlogsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/projects",
        "/publications",
        "/sign-in",
        "/_authed/admin",
        "/blogs/$blogId",
        "/blogs/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/projects": {
      "filePath": "projects.tsx"
    },
    "/publications": {
      "filePath": "publications.tsx"
    },
    "/sign-in": {
      "filePath": "sign-in.tsx"
    },
    "/_authed/admin": {
      "filePath": "_authed/admin.tsx"
    },
    "/blogs/$blogId": {
      "filePath": "blogs/$blogId.tsx"
    },
    "/blogs/": {
      "filePath": "blogs/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
